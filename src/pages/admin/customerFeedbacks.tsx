//libs
import Head from 'next/head';
import {useQuery, gql} from '@apollo/client';
import _range from 'lodash/range';

//components
import {
  Box,
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  Button,
  Skeleton,
  Stack,
} from '@chakra-ui/react';

//icons
import {WarningTwoIcon} from '@chakra-ui/icons';

//types
import {Feedback} from '@prisma/client';
import {FeedbackCard} from '@/components/FeedbackCard';
import {useCallback} from 'react';

const FEEDBACKS_QUERY = gql`
  query Feedbacks {
    readFeedbacks {
      email
      id
      message
      name
      subject
    }
  }
`;

export default function CustomerFeedbacksPage() {
  const {data, loading, error, refetch} = useQuery<{readFeedbacks: Feedback[]}>(FEEDBACKS_QUERY);

  const handleRefetch = useCallback(() => refetch(), [refetch]);

  const renderBody = useCallback((): JSX.Element => {
    if (loading) {
      return (
        <Box
          maxWidth={{md: '5xl', sm: 'full'}}
          mx="auto"
          display="grid"
          gridTemplateColumns={{md: 'repeat(2, 1fr)', sm: '1fr'}}
          gap={2}
        >
          {_range(10).map((idx: number) => (
            <Skeleton width="full" height={56} key={idx} />
          ))}
        </Box>
      );
    }

    if (error) {
      return (
        <Box mx="auto" display="flex" flexDirection="column" alignItems="center" gap={4}>
          <WarningTwoIcon color="brand.500" boxSize={20} />
          <Box fontWeight="bold">Oops! An Error Occurred!</Box>
          <Button colorScheme="brand" variant="outline" onClick={handleRefetch}>
            Retry
          </Button>
        </Box>
      );
    }

    return (
      <Box
        maxWidth={{md: '5xl', sm: 'full'}}
        mx="auto"
        display="grid"
        gridTemplateColumns={{md: 'repeat(2, 1fr)', sm: '1fr'}}
        gap={2}
      >
        {data?.readFeedbacks.map((feedback: Feedback) => (
          <FeedbackCard key={feedback.id} feedback={feedback} />
        ))}
      </Box>
    );
  }, [data?.readFeedbacks, error, handleRefetch, loading]);

  return (
    <>
      <Head>
        <title>Customer Feedbacks</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box as="main">
        <Box
          height="400px"
          backgroundPosition="center"
          backgroundRepeat="no-repeat"
          backgroundSize="cover"
          backgroundImage="https://preview.colorlib.com/theme/feliciano/images/bg_3.jpg.webp"
          backgroundAttachment="fixed"
          width="full"
          display="flex"
          alignItems="center"
        >
          <Stack
            spacing={0}
            direction="column"
            alignItems="center"
            justifyContent="flex-end"
            height="full"
            width="full"
            backgroundColor="blackAlpha.700"
            pb={8}
          >
            <Box fontSize="4xl" fontWeight="extrabold" color="white">
              Customer Feedbacks
            </Box>

            <Breadcrumb fontSize="xs" color="white" textTransform="uppercase">
              <BreadcrumbItem>
                <BreadcrumbLink href="/">Home</BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem>
                <BreadcrumbLink href="/admin">Admin</BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem>
                <BreadcrumbLink href="/admin/customerFeedbacks">Customer Feedbacks</BreadcrumbLink>
              </BreadcrumbItem>
            </Breadcrumb>
          </Stack>
        </Box>

        <Box py={16} px={4} maxWidth={1100} mx="auto">
          {renderBody()}
        </Box>
      </Box>
    </>
  );
}
