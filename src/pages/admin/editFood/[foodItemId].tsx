//libs
import Head from 'next/head';
import _range from 'lodash/range';
import {useRouter} from 'next/router';
import {gql, useQuery} from '@apollo/client';
import {useCallback} from 'react';
import Dinero, {Currency} from 'dinero.js';

//components
import {Box, Breadcrumb, BreadcrumbItem, BreadcrumbLink, Stack} from '@chakra-ui/react';
import {CreateFoodForm} from '@/components/createFoodForm';
import {FullPageLoader} from '@/components/FullPageLoader';
import {FullPageErrorScreen} from '@/components/FullPageErrorScreen';

//hooks
import {useUpdateFood} from '@/hooks/useUpdateFood';

//hocs
import {withAuthentication} from '@/decorators/withAuthentication';

//constants
import {ROUTE_TYPE} from '@/decorators/withAuthentication/withAuthentication';

//types
import {Food} from '@prisma/client';
import {FORM_KEYS, FormValues} from '@/components/createFoodForm/CreateFoodForm';
import {FormikConfig} from 'formik';

const FETCH_FOOD_ITEM_QUERY = gql`
  query FetchFoodItem($foodItemId: String!) {
    fetchFoodItem(foodItemId: $foodItemId) {
      id
      name
      description
      pictures
      isVeg
      inStock
      price {
        amount
        currency
        precision
      }
      category
    }
  }
`;

const EditFoodItemPageBody = withAuthentication({
  routeType: ROUTE_TYPE.ADMIN,
})(() => {
  const {
    query: {foodItemId},
    push,
  } = useRouter();

  const {updateFood, loading: isSubmitting} = useUpdateFood();

  const {loading, error, data, refetch} = useQuery<{fetchFoodItem: Food}>(FETCH_FOOD_ITEM_QUERY, {
    variables: {
      foodItemId,
    },
  });

  const handleSubmit: FormikConfig<FormValues>['onSubmit'] = useCallback(
    (values: FormValues, {resetForm}) =>
      updateFood({
        variables: {
          updateFoodItemInput: {
            id: data?.fetchFoodItem.id!,
            name: values.name,
            description: values.description,
            pictures: values.pictures,
            isVeg: values.isVeg,
            inStock: values.inStock,
            price: Dinero({
              amount: +values.priceAmount * 100,
              currency: values.priceCurrency as Currency,
            }).toObject(),
            category: values.category,
          },
        },
      }).then(() => push('/admin/manageFood')),
    [data?.fetchFoodItem.id, push, updateFood],
  );

  if (loading || !data) {
    return <FullPageLoader />;
  }

  if (error) {
    return <FullPageErrorScreen refetch={refetch} />;
  }

  const food = data.fetchFoodItem;

  return (
    <Box py={16} px={4} maxWidth={1100} mx="auto">
      <CreateFoodForm
        initialValue={{
          [FORM_KEYS.NAME]: food.name,
          [FORM_KEYS.DESCRIPTION]: food.description,
          [FORM_KEYS.PICTURES]: food.pictures,
          [FORM_KEYS.IS_VEG]: food.isVeg,
          [FORM_KEYS.IN_STOCK]: food.inStock,
          //@ts-ignore
          [FORM_KEYS.PRICE_AMOUNT]: food.price.amount!,
          //@ts-ignore
          [FORM_KEYS.PRICE_CURRENCY]: food.price.currency!,
          [FORM_KEYS.CATEGORY]: food.category,
        }}
        isSubmitting={isSubmitting}
        onSubmit={handleSubmit}
      />
    </Box>
  );
});

function EditFoodItemPage() {
  return (
    <>
      <Head>
        <title>Edit Food</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box as="main">
        <Box
          height="400px"
          backgroundPosition="center"
          backgroundRepeat="no-repeat"
          backgroundSize="cover"
          backgroundImage="https://preview.colorlib.com/theme/feliciano/images/bg_3.jpg.webp"
          backgroundAttachment="fixed"
          width="full"
          display="flex"
          alignItems="center"
        >
          <Stack
            spacing={0}
            direction="column"
            alignItems="center"
            justifyContent="flex-end"
            height="full"
            width="full"
            backgroundColor="blackAlpha.700"
            pb={8}
          >
            <Box fontSize="4xl" fontWeight="extrabold" color="white">
              Edit Food
            </Box>

            <Breadcrumb fontSize="xs" color="white" textTransform="uppercase">
              <BreadcrumbItem>
                <BreadcrumbLink href="/">Home</BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem>
                <BreadcrumbLink href="/admin">Admin</BreadcrumbLink>
              </BreadcrumbItem>

              <BreadcrumbItem>
                <BreadcrumbLink href="/admin/editFood">Edit Food</BreadcrumbLink>
              </BreadcrumbItem>
            </Breadcrumb>
          </Stack>
        </Box>

        <EditFoodItemPageBody />
      </Box>
    </>
  );
}

export default EditFoodItemPage;
