// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Feedback {
  id        Int      @id @default(autoincrement())
  name      String //`name` and `email` should be inside `user`
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model NewsLetterSubscriber {
  email     String   @id
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Address {
  id        String   @id @default(cuid())
  line1     String
  line2     String?
  city      String
  state     String
  country   String
  pinCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Order     Order[]

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  role          Role           @default(USER)
  addresses     Address[]
  accounts      Account[] //Auth
  sessions      Session[] //Auth
  orders        Order[]
  foods         Food[]
  tableBookings TableBooking[]
  ratings       Rating[]
  cart          Cart?
}

enum Order_status {
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  TERMINATED
}

model OrderItem {
  id      String  @id @default(cuid())
  food    Food    @relation(fields: [foodId], references: [id])
  foodId  String
  count   Int
  order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@index([orderId])
  @@index([foodId])
}

model Order {
  id        String       @id @default(cuid())
  status    Order_status @default(PREPARING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    String
  address   Address      @relation(fields: [addressId], references: [id])
  addressId String
  items     OrderItem[]
  rating    Rating?      @relation(fields: [ratingId], references: [id])
  ratingId  String?      @unique

  @@index([userId])
  @@index([addressId])
}

model CartItem {
  food   Food   @relation(fields: [foodId], references: [id]) //itemType, itemId
  foodId String
  count  Int
  cart   Cart   @relation(fields: [cartId], references: [id])
  cartId String

  @@unique([foodId, cartId])
  @@index([foodId, cartId])
  @@index([cartId])
}

model Cart {
  id     String     @id @default(cuid())
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique

  @@index([userId])
}

model Rating {
  id       String  @id @default(cuid())
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  orderId  String
  rating   Int
  feedback String?
  order    Order?

  @@index([userId])
  @@index([orderId])
}

enum Food_category {
  BREAKFAST
  LUNCH
  DINNER
  DESSERT
  DRINK
}

model Food {
  id          String        @id @default(cuid())
  name        String
  description String
  pictures    String
  isVeg       Boolean //MenuItem
  inStock     Boolean
  isDeleted   Boolean       @default(false)
  price       Json // {amount: string; currency: string}
  category    Food_category @default(BREAKFAST)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  orderItem   OrderItem[]
  cartItem    CartItem[]

  @@index([userId])
}

enum TableBooking_tableBookingStatus {
  WAITING_FOR_CONFIRMATION
  CANCELLED
  CONFIRMED
}

model TableBooking {
  id                 String                          @id @default(cuid())
  date               DateTime
  numberOfPeople     Int
  tableBookingStatus TableBooking_tableBookingStatus @default(WAITING_FOR_CONFIRMATION)
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime                        @updatedAt
  user               User                            @relation(fields: [userId], references: [id])
  userId             String

  @@index([userId])
}
